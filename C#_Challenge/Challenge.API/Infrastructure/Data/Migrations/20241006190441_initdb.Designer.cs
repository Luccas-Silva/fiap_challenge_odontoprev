// <auto-generated />
using System;
using Challenge.API.Infrastructure.Data.AppData;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Oracle.EntityFrameworkCore.Metadata;

#nullable disable

namespace Challenge.API.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20241006190441_initdb")]
    partial class initdb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            OracleModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Challenge.API.Domains.Entities.ClienteEntity", b =>
                {
                    b.Property<string>("cpf_cnpj")
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<string>("cep")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("tipoPlano")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("usuarioidUsuario")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(450)");

                    b.HasKey("cpf_cnpj");

                    b.HasIndex("usuarioidUsuario");

                    b.ToTable("Cliente");
                });

            modelBuilder.Entity("Challenge.API.Domains.Entities.ConsultaEntity", b =>
                {
                    b.Property<string>("idConsulta")
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<string>("clientecpf_cnpj")
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<DateTime>("dateConsulta")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<string>("dentistacpf_cnpj")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<string>("tipoConsulta")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<double>("valorMedioConsulta")
                        .HasColumnType("BINARY_DOUBLE");

                    b.HasKey("idConsulta");

                    b.HasIndex("clientecpf_cnpj");

                    b.HasIndex("dentistacpf_cnpj");

                    b.ToTable("Consulta");
                });

            modelBuilder.Entity("Challenge.API.Domains.Entities.DentistaEntity", b =>
                {
                    b.Property<string>("cpf_cnpj")
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<bool>("alvaraFuncionamento")
                        .HasColumnType("BOOLEAN");

                    b.Property<string>("cepClinica")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("nomeClinica")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("siteRedesSocial")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("tipoClinica")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("usuarioidUsuario")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(450)");

                    b.HasKey("cpf_cnpj");

                    b.HasIndex("usuarioidUsuario");

                    b.ToTable("Dentista");
                });

            modelBuilder.Entity("Challenge.API.Domains.Entities.UsuarioEntity", b =>
                {
                    b.Property<string>("idUsuario")
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<string>("Celular")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<DateTime>("dataNascimento")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<string>("nome")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.HasKey("idUsuario");

                    b.ToTable("Usuario");
                });

            modelBuilder.Entity("Challenge.API.Domains.Entities.ClienteEntity", b =>
                {
                    b.HasOne("Challenge.API.Domains.Entities.UsuarioEntity", "usuario")
                        .WithMany()
                        .HasForeignKey("usuarioidUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("usuario");
                });

            modelBuilder.Entity("Challenge.API.Domains.Entities.ConsultaEntity", b =>
                {
                    b.HasOne("Challenge.API.Domains.Entities.ClienteEntity", "cliente")
                        .WithMany("consultas")
                        .HasForeignKey("clientecpf_cnpj");

                    b.HasOne("Challenge.API.Domains.Entities.DentistaEntity", "dentista")
                        .WithMany("consultas")
                        .HasForeignKey("dentistacpf_cnpj")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("cliente");

                    b.Navigation("dentista");
                });

            modelBuilder.Entity("Challenge.API.Domains.Entities.DentistaEntity", b =>
                {
                    b.HasOne("Challenge.API.Domains.Entities.UsuarioEntity", "usuario")
                        .WithMany()
                        .HasForeignKey("usuarioidUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("usuario");
                });

            modelBuilder.Entity("Challenge.API.Domains.Entities.ClienteEntity", b =>
                {
                    b.Navigation("consultas");
                });

            modelBuilder.Entity("Challenge.API.Domains.Entities.DentistaEntity", b =>
                {
                    b.Navigation("consultas");
                });
#pragma warning restore 612, 618
        }
    }
}
